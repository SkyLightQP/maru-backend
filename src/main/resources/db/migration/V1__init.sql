create sequence batch_step_execution_seq;

create sequence batch_job_execution_seq;

create sequence batch_job_seq;

create table if not exists batch_job_instance
(
    job_instance_id bigint       not null
        primary key,
    version         bigint,
    job_name        varchar(100) not null,
    job_key         varchar(32)  not null,
    constraint job_inst_un
        unique (job_name, job_key)
);

create table if not exists batch_job_execution
(
    job_execution_id bigint    not null
        primary key,
    version          bigint,
    job_instance_id  bigint    not null
        constraint job_inst_exec_fk
            references batch_job_instance,
    create_time      timestamp not null,
    start_time       timestamp,
    end_time         timestamp,
    status           varchar(10),
    exit_code        varchar(2500),
    exit_message     varchar(2500),
    last_updated     timestamp
);

create table if not exists batch_job_execution_params
(
    job_execution_id bigint       not null
        constraint job_exec_params_fk
            references batch_job_execution,
    parameter_name   varchar(100) not null,
    parameter_type   varchar(100) not null,
    parameter_value  varchar(2500),
    identifying      char         not null
);

create table if not exists batch_step_execution
(
    step_execution_id  bigint       not null
        primary key,
    version            bigint       not null,
    step_name          varchar(100) not null,
    job_execution_id   bigint       not null
        constraint job_exec_step_fk
            references batch_job_execution,
    create_time        timestamp    not null,
    start_time         timestamp,
    end_time           timestamp,
    status             varchar(10),
    commit_count       bigint,
    read_count         bigint,
    filter_count       bigint,
    write_count        bigint,
    read_skip_count    bigint,
    write_skip_count   bigint,
    process_skip_count bigint,
    rollback_count     bigint,
    exit_code          varchar(2500),
    exit_message       varchar(2500),
    last_updated       timestamp
);

create table if not exists batch_step_execution_context
(
    step_execution_id  bigint        not null
        primary key
        constraint step_exec_ctx_fk
            references batch_step_execution,
    short_context      varchar(2500) not null,
    serialized_context text
);

create table if not exists batch_job_execution_context
(
    job_execution_id   bigint        not null
        primary key
        constraint job_exec_ctx_fk
            references batch_job_execution,
    short_context      varchar(2500) not null,
    serialized_context text
);

create table if not exists token_blacklist
(
    token_blacklist_id bigint generated by default as identity
        primary key,
    created_at         timestamp(6) with time zone not null,
    updated_at         timestamp(6) with time zone not null,
    token              varchar(512)                not null
);

create index if not exists idx_token
    on token_blacklist (token);

create table if not exists users
(
    user_id    uuid                        not null
        primary key,
    created_at timestamp(6) with time zone not null,
    updated_at timestamp(6) with time zone not null,
    deleted_at timestamp(6) with time zone,
    email      varchar(255)                not null,
    nickname   varchar(255)                not null,
    vendor     varchar(255)                not null
        constraint users_vendor_check
            check ((vendor)::text = ANY
                   ((ARRAY ['NAVER'::character varying, 'GOOGLE'::character varying, 'APPLE'::character varying])::text[]))
);

create table if not exists diaries
(
    diary_id   bigint generated by default as identity
        primary key,
    created_at timestamp(6) with time zone not null,
    updated_at timestamp(6) with time zone not null,
    content    text                        not null,
    deleted_at timestamp(6) with time zone,
    title      text                        not null,
    user_id    uuid                        not null
        constraint fkki7hoimuu910cy56y2695to5e
            references users
);

create table if not exists files
(
    file_id       bigint generated by default as identity
        primary key,
    created_at    timestamp(6) with time zone                      not null,
    updated_at    timestamp(6) with time zone                      not null,
    deleted_at    timestamp(6) with time zone,
    original_path varchar(255)                                     not null,
    path          varchar(255)                                     not null,
    status        varchar(20) default 'PENDING'::character varying not null
        constraint files_status_check
            check ((status)::text = ANY
                   ((ARRAY ['PENDING'::character varying, 'UPLOADED'::character varying, 'USED'::character varying, 'ORPHANED'::character varying])::text[])),
    user_id       uuid                                             not null
        constraint fkdgr5hx49828s5vhjo1s8q3wdp
            references users
);

create table if not exists diary_files
(
    diary_file_id bigint generated by default as identity
        primary key,
    created_at    timestamp(6) with time zone not null,
    updated_at    timestamp(6) with time zone not null,
    diary_id      bigint                      not null
        constraint fk28cjm1anqo3lflp91cmty9qfj
            references diaries,
    file_id       bigint                      not null
        constraint fk671yvssux9qng6vrphxu45i6
            references files
);

create table if not exists streaks
(
    streak_id   bigint generated by default as identity
        primary key,
    created_at  timestamp(6) with time zone not null,
    updated_at  timestamp(6) with time zone not null,
    best_streak integer                     not null,
    streak      integer                     not null,
    user_id     uuid                        not null
        constraint fkmk6t6bsujyp3m0p9aigwiciwy
            references users
);


